@page "/claims"

@using System.Security.Claims
@using MongoAuth.Services
@inject AuthenticationStateProvider AuthenticationStateProvider

@* Bootstrap container for centering content *@
<div class="container d-flex justify-content-center align-items-center vh-100">
    <div class="text-center">
        <h1>ClaimsPrincipal Data</h1>

        <button class="btn btn-primary" @onclick="GetClaimsPrincipalData">Get ClaimsPrincipal Data</button>

        <p>@authMessage</p>

        @if (claims.Any())
        {
            <ul class="list-unstyled">
                @foreach (var claim in claims)
                {
                    <li>@claim.Type: @claim.Value</li>
                }
            </ul>
            <br />
            <p><strong>UserName : </strong>@uname</p>
            <p><strong>Email : </strong>@email</p>
            <p><strong>Role : </strong>@role</p>
        }

        <p>@surname</p>
    </div>
</div>

@code {
    private string? authMessage;
    private string? surname;
    ClaimsIdentity authuser;
    ClaimsIdentity userEmail;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;
        authuser = user.Identity as ClaimsIdentity;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            authMessage = $"{user.Identity.Name} is authenticated.";
            claims = user.Claims;
            surname = user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value;
        }
        else
        {
            authMessage = "The user is NOT authenticated.";
        }

    }
    private string? uname;
    private string? email;
    private string? role;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            uname = user.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name")?.Value;
            email = user.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress")?.Value;
            role = user.FindFirst("http://schemas.microsoft.com/ws/2008/06/identity/claims/role")?.Value;
        }
        else
        {
            uname = null;
            email = null;
            role = null;
        }
    }
}