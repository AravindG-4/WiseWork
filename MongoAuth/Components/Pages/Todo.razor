@page "/todo"
@rendermode InteractiveServer
@attribute [CustomAuthorize("user")]
@using MongoAuth.Shared.Models
@inject NavigationManager Navigation
@inject MongoDBServices MongoService

<PageTitle>To-Do</PageTitle>

<MudLayout Class="container">

    <MudText Typo="Typo.h2">To-Do</MudText>
    <MudText Class="mt-3 mb-3">Manage your tasks here</MudText>

    <MudGrid>
        <MudItem xs="6">
        <MudTextField Label="Add Your New Task" Variant="Variant.Filled" @bind-Value="UserInput" Immediate="true" />
        </MudItem>
        <MudItem xs="4">
        <MudButton Class="mt-2" Variant="Variant.Filled" Color="Color.Primary" Disabled="@ButtonDisabled" OnClick="AddTask">Add Task</MudButton>
        </MudItem>
    </MudGrid>

    <MudText Typo="Typo.h5" Color="Color.Warning" Class="mt-6">Pending Tasks : @PendingToDos.Count</MudText>

    @if (PendingToDos.Count == 0)
    {
        <MudText Class="mt-9" Style="text-align:center">No Pending Tasks</MudText>
    }
    else
    {

        <MudList T="string">
            @foreach (var ToDo in PendingToDos)
            {
                <MudGrid Class="mt-0">
                    <MudItem xs="7">
                        <MudListItem Style="background-color: #f0f0f0" Text="@ToDo.Title" Icon="@Icons.Material.Filled.FlagCircle" Variant="Variant.Filled" />
                    </MudItem>
                    <MudItem xs="0">
                        <MudIconButton Icon="@Icons.Material.Filled.Done" Color="Color.Success" OnClick="((e) => TaskDone(ToDo))" />
                    </MudItem>
                    <MudItem xs="0">
                        <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" OnClick="((e) => TaskClose(ToDo))" />
                    </MudItem>
                </MudGrid>
            }
        </MudList>

    }
    <MudText Typo="Typo.h5" Color="Color.Warning" Class="mt-6">Completed Tasks : @CompletedToDos.Count</MudText>

    @if (CompletedToDos.Count == 0)
    {
        <MudText Class="mt-9 mb-5" Style="text-align:center">No Tasks Completed</MudText>
    }
    else
    {

        <MudList T="string" Class="mb-5">
            @foreach (var ToDo in CompletedToDos)
            {
                <MudGrid Class="mt-0">
                    <MudItem xs="7">
                        <MudListItem Style="background-color: #f0f0f0" Text="@ToDo.Title" Icon="@Icons.Material.Filled.DoneAll" Variant="Variant.Filled" />
                    </MudItem>
                    <MudItem xs="0">
                        <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" OnClick="((e) => TaskClose(ToDo))" />
                    </MudItem>
                </MudGrid>
            }
        </MudList>

    }

</MudLayout>

@code
{
    public string UserInput { get; set; }

    private List<ToDo> PendingToDos = new List<ToDo>();
    private List<ToDo> CompletedToDos = new List<ToDo>();
    public bool ButtonDisabled => string.IsNullOrEmpty(UserInput);


    protected override async Task OnInitializedAsync()
    {
        await LoadToDos();
    }

    private async Task LoadToDos()
    {
        try
        {
            PendingToDos = await MongoService.ReadPending();
            CompletedToDos = await MongoService.ReadCompleted();
            Console.WriteLine("Read Pending and Completed ToDos");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            PendingToDos = new List<ToDo>();
            CompletedToDos = new List<ToDo>();
        }
    }

    private async Task AddTask()
    {
        Console.WriteLine($"Title: {UserInput}");
        DateTime TaskAddedDate = DateTime.Now;
        try
        {
            ToDo task = new ToDo()
                {
                    Title = UserInput,
                    TaskAddedDate = TaskAddedDate
                };
            await MongoService.CreateToDo(task);
            Console.WriteLine($"Task created : {UserInput}");
            await LoadToDos();
            UserInput = string.Empty;   
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }


    private async Task TaskDone(ToDo task)
    {
        await MongoService.CompleteToDo(task);
        Console.WriteLine($"{task.Title} Done");
        await LoadToDos();
    }

    private async Task TaskClose(ToDo task)
    {
        await MongoService.RemoveToDo(task);
        Console.WriteLine($"{task.Title} Removed");
        await LoadToDos();
    }
}